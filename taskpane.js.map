{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html","webpack://office-addin-taskpane-js/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/compat get default export","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/presets/presets.js","webpack://office-addin-taskpane-js/./src/taskpane/eastereggs/jokes.js"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./logo-filled.png\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Data Merge Utility</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <div id=\\\"loader-container\\\"> <div id=\\\"loader-contents\\\"> <h4 id=\\\"loader-title\\\">Processing...</h4> <p>Splitting the thing...</p> </div> </div> <div id=\\\"message\\\" style=\\\"display:none\\\"> <div id=\\\"message-contents\\\"> <h4>Message Title</h4> <p id=\\\"message-text\\\">Message text...</p> <button class=\\\"btns\\\" id=\\\"msg-dismiss\\\">Dismiss</button> </div> </div> <div id=\\\"title-area\\\"> <img src=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\"/> <h3>Data Merge Utility</h3> <p id=\\\"editSplash\\\" style=\\\"padding:1em;display:none\\\"><small>Now that your data is loaded, you may edit individual columns down below.</small></p> </div> <div id=\\\"top-controls\\\"> <select class=\\\"custom-select wider-elements\\\" id=\\\"presets\\\"> <option id=\\\"preset-placeholder\\\" value=\\\"none\\\" selected=\\\"selected\\\" disabled=\\\"disabled\\\">Choose a preset...</option> </select> <div id=\\\"top-controls-btns\\\"> <button id=\\\"btn-load\\\" class=\\\"btns\\\">Load Data</button> <button id=\\\"btn-reset\\\" class=\\\"btns\\\" style=\\\"display:none\\\">Reset</button> <button id=\\\"btn-process\\\" class=\\\"btns\\\" style=\\\"display:none\\\">Process</button> <button id=\\\"btn-export\\\" class=\\\"btns\\\" style=\\\"display:none\\\">Export</button> </div> </div> <div class=\\\"control\\\"> <input type=\\\"checkbox\\\" id=\\\"samplerows\\\" name=\\\"samplerows\\\"> <label for=\\\"samplerows\\\">Sample Rows</label> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> 5 Rows of \\\"SAMPLE\\\" for setting up the printers. </div> </div> <div class=\\\"control\\\"> <input type=\\\"checkbox\\\" id=\\\"alt-rows\\\"/> <label for=\\\"alt-rows\\\">Alternating Rows</label> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Row numbers appear beside each other on the press sheet. </div> </div> <div class=\\\"control\\\"> <p>Number Up</p> <input type=\\\"number\\\" class=\\\"clear-inputs wider-elements\\\" id=\\\"num-up\\\" value=\\\"1\\\"/> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> The number of pieces that appear on each page of the press sheet. </div> </div> <div class=\\\"control\\\"> <input type=\\\"checkbox\\\" id=\\\"curres\\\"/> <label for=\\\"curres\\\">(Or) Current Resident Columns</label> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Adds two columns to the spreadsheet for \\\"Current Resident\\\" and \\\"Or Current Resident\\\" </div> </div> <div class=\\\"control\\\"> <p>Number of Output Files</p> <input type=\\\"number\\\" class=\\\"clear-inputs wider-elements\\\" id=\\\"drops\\\" value=\\\"1\\\"/> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Number of sheets to produce </div> </div> <div class=\\\"collapsible\\\" id=\\\"collapsible\\\" style=\\\"display:none\\\"> <div class=\\\"collapsible-head\\\" item=\\\"utility\\\"> <p>Edit Columns</p> </div> <div class=\\\"collapsible-container\\\" id=\\\"utility-container\\\"> <div class=\\\"control\\\"> <p>Artwork Column</p> <div class=\\\"text-input-area\\\"> <input type=\\\"text\\\" class=\\\"text-input clear-inputs\\\" id=\\\"artworkData\\\" placeholder=\\\"Directory Here\\\" value=\\\"./Artwork/\\\"/> <button id=\\\"artworkCol\\\" class=\\\"text-input-btn btns\\\">&gt;</button> </div> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Converts the selected column into an Artwork column. Prepends \\\"'@\\\" to the header, prepends inputted directory to the column data and makes all file extensions lowercase. </div> </div> <div class=\\\"control\\\"> <p>Prepend Text</p> <div class=\\\"text-input-area\\\"> <input type=\\\"text\\\" class=\\\"text-input clear-inputs\\\" id=\\\"prependData\\\"/> <button class=\\\"text-input-btn btns\\\" id=\\\"prepend\\\">&gt;</button> </div> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Inserts text before each cell in this column. </div> </div> <div class=\\\"control\\\"> <p>Append Text</p> <div class=\\\"text-input-area\\\"> <input type=\\\"text\\\" class=\\\"text-input clear-inputs\\\" id=\\\"appendData\\\"/> <button id=\\\"append\\\" class=\\\"text-input-btn btns\\\">&gt;</button> </div> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Inserts text after each cell in this column. </div> </div> <div class=\\\"control\\\"> <p>UPPERCASE Column <button id=\\\"uppercase\\\" class=\\\"text-input-btn btns\\\">&gt;</button></p> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Converts the column of selected cell to UPPERCASE. </div> </div> <div class=\\\"control\\\"> <p>lowercase Column <button id=\\\"lowercase\\\" class=\\\"text-input-btn btns\\\">&gt;</button></p> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Converts the column of selected cell to lowercase. </div> </div> <div class=\\\"control\\\"> <p>Title Case Column <button id=\\\"titlecase\\\" class=\\\"text-input-btn btns\\\">&gt;</button></p> <div class=\\\"info\\\"> <div class=\\\"info-i\\\"> <div class=\\\"cir\\\">i</div> </div> Converts the column of selected cell to Title/Proper Case. </div> </div> </div> </div> <p id=\\\"copy\\\">v 1.0.7 • &copy; <span id=\\\"year\\\"></span> Mail Shark DevOps.</p>  </body> </html> \";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n\n\n  url = String(url.__esModule ? url.default : url);\n\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t41: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\n//         ╔══════════════════════════════════════════════════════════╗\n//         ║             Variable Data Processing Utility             ║\n//         ╚══════════════════════════════════════════════════════════╝       \n//         ╭──────────────────────────────────────────────────────────╮\n//         │ Author(s): Todd  (todd@themailshark.com)                 |\n//         |            Danny (dliehr@themailshark.com)               │\n//         │                                                          │\n//         │ Description: A collection of useful scripts for          │\n//         │  processing variable lists. Useful for artists           │\n//         │  tasked with processing lists from Data Processing.      │\n//         ╰──────────────────────────────────────────────────────────╯\n\n// #region Instantiate Global Scope --------------------------------------------\n    import getPresets from \"./presets/presets.js\"\n    import getSplash from \"./eastereggs/jokes.js\";\n    const presets = getPresets();\n    const splashText = getSplash();\n    const currentYear= new Date().getFullYear();\n\n    /*  \n        For catching if something needs a sample row or not. \n        Add more file extensions if artists start using more varied image types. \n        Excluded GIF because under no circumstances should those be printing. \n    */\n    var imgSuffix = [\"pdf\", \"jpg\", \"psd\", \"png\", \"bmp\", \"svg\", \"jpeg\", \"tiff\", \"tif\", \"tif\", \"webp\", \"ai\", \"indd\", \"indt\", \"idml\"]\n// #endregion\n\n// #region Functions -----------------------------------------------------------\n\n    // Populate the presets when the taskpane opens.\n    Office.onReady(() => {\n        presets.forEach((preset) => {\n            document.getElementById(\"presets\").innerHTML =\n                document.getElementById(\"presets\").innerHTML +\n                `<option\n                        name=\"${preset.name}\"\n                        alternateRows=\"${preset.alternateRows}\"\n                        numberUp=\"${preset.numberUp}\"\n                        drops=\"${preset.numberDrops}\"\n                    >${preset.name}</option>`\n        });\n        document.querySelector(\"#year\").innerHTML= currentYear;\n    });\n\n    /** \n     * Makes a string Title Case\n     * @param {String} str String to be formatted\n     * @returns {String} Title Case String\n     */\n    function toTitleCase(str) {\n        // 1. Split the string into words\n        const words = str.split(' ');\n    \n        // 2. Define suffixes and titles (as arrays for efficient lookups)\n        const suffixes = [\n            // Human Suffixes\n            \"I\", \n            \"II\", \n            \"III\", \n            \"IV\", \n            \"V\", \n            \"VI\", \n            \"VII\", \n            \"VIII\", \n            \"IX\", \n            \"X\", \n            \"Jr\", \n            \"Sr\", \n            \"Jr.\", \n            \"Sr.\", \n            // Doctorate Suffixes\n            \"PhD\",\n            \"MD\",\n            \"DDS\",\n            \"DVM\",\n            \"PharmD\",\n            \"DC\",\n            \"DO\",\n            // Corporate Suffixes\n            \"LLC\", \n            \"PLC\",\n            \"NPO\",\n            \"LP\",\n            \"LLP\",\n            \"GP\",\n            \"Inc\",\n            \"Corp\",\n            \"Co\",\n            \"Ltd\",\n            \"AG\",\n            \"GmbH\",\n        ];\n        const titles = [\n            \"Dr\", \n            \"Dr.\",\n            \"Mr\", \n            \"Mr.\",\n            \"Ms\", \n            \"Ms.\",\n            \"Mrs\", \n            \"Mrs.\",\n            \"Miss\",\n            \"Mx\",\n            \"Mx.\", \n            \"Prof\",\n            \"Prof.\",\n            \"Rev\",\n            \"Rev.\",\n            \"Fr\",\n            \"Fr.\",\n\n        ];\n    \n        // 3. Loop through each word\n        for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n    \n        // 4. Check for suffixes at the end (but not the first word, and the previous word shouldn't be a title)\n        if (suffixes.includes(word.toUpperCase()) && (i > 0 && !titles.includes(words[i - 1]))) {\n            word = word.toUpperCase(); // Make suffix uppercase\n        // 5. Check for titles followed by names (not followed by suffixes)\n        } else if (titles.includes(word.toUpperCase()) && (i + 1 < words.length && !suffixes.includes(words[i + 1].toUpperCase()))) {\n            word = word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(); // Title case the title and next word\n        // 6. Otherwise, apply standard title case\n        } else {\n            word = word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(); // Standard title case\n        }\n    \n        // 7. Update the word in the array\n        words[i] = word;\n        }\n    \n        // 8. Join the modified words back into a string\n        return words.join(' ');\n    }\n\n    /**\n     * Grabs an excel column from an index number.\n     * @param {int} index \n     * @returns {string} Column name\n     */\n    function getLetterByIndex(index) {\n        const alphabet = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n        let letter = \"\";\n\n        while (index >= 0) {\n            letter = alphabet[index % 26] + letter;\n            index = Math.floor(index / 26) - 1;\n        }\n\n        return letter;\n    }\n    /**\n     * For funsies: Picks a random item from an array.\n     * @param {Array} arr Array of items\n     * @returns {String} A randomized item in the array\n     */\n    function randomize(arr){\n        return arr[Math.floor(Math.random()*arr.length)]\n    }\n\n    /**\n     * Counts how many digits a number is\n     * @param {Number} number Input number\n     * @returns {Number} Length of number\n     */\n    function countDigits(number) {\n        return String(number).length;\n    }\n\n    /**\n     * Turns an Excel serial number into a date.\n     * @param {*} excelDate \n     * @returns {String} \"mm/dd/yyyy\"\n     */\n    function excelDateToString(excelDate) {\n        // Calculate the UTC date to avoid local timezone offset issues\n        let utcDays = Math.floor(excelDate - 25569);\n        let utcValue = utcDays * 86400; // seconds\n        let date = new Date(utcValue * 1000);\n\n        // Get the month, day, and year from the Date object using UTC methods\n        let month = date.getUTCMonth() + 1; // Add one because months are zero-based\n        let day = date.getUTCDate();\n        let year = date.getUTCFullYear();\n\n        // Format the month, day, and year as two-digit strings\n        month = month < 10 ? \"0\" + month : month; // Add a leading zero if less than 10\n        day = day < 10 ? \"0\" + day : day; // Add a leading zero if less than 10\n        year = year.toString().slice(-2); // Get the last two digits of the year\n\n        // Return the date string in the format MM/DD/YY\n        return month + \"/\" + day + \"/\" + year;\n    }\n\n    /**\n     * Converts input date into serial number that excel can apply conditional formatting to\n     * @param {Date} inDate A date variable\n     * @returns String\n     */\n    function JSDateToExcelDate(inDate) {\n        var returnDateTime = 25569.0 + ((inDate.getTime() - (inDate.getTimezoneOffset() * 60 * 1000)) / (1000 * 60 * 60 * 24));\n        //var returnDateTime = 25569.0 + ((inDate.getTime()) / (1000 * 60 * 60 * 24));\n        return returnDateTime.toString().substr(0,20);\n    };\n\n    /**\n     * Finds the value of Date Added in the changed row and converts it to be a date object in EST.\n     * @param {Number} serial The serial number to be converted\n     * @returns Date\n     */\n    function convertToDate(serial) {\n        var date = new Date(Math.round((serial - 25569)*86400*1000)); //convert serial number to date object\n        date.setMinutes(date.getMinutes() + date.getTimezoneOffset()); //adjusting from GMT to EST (adds 4 hours)\n        return date;\n    };\n\n    /**\n     * Take a date and formats it to be a string in the mm/dd/yy format\n     * @param {Date} date A date variable\n     * @returns String\n     */\n    function formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n        year = year.toString().substr(-2);\n\n        return [month, day, year].join('/');\n    };\n\n    /**\n     * Loads a message on the taskpane based on the type of message.\n     * @param {String} title Title of Message\n     * @param {String} message Body of Message\n     * @param {String} type Type of message (\"alert\" or \"error\")\n     */\n    const showMessage = (title, message, type) => {\n        document.querySelector(\"#message-contents > h4\").innerHTML = title;\n        document.querySelector(\"#message-contents > p\").innerHTML = message;\n        document.getElementById(\"message\").style.display = \"flex\";\n\n        switch (type) {\n            case \"alert\":\n                document.querySelector('#message-contents > h4')\n                    .style.color = \"mediumseagreen\";\n                break;\n\n            case \"error\":\n                document.querySelector('#message-contents > h4')\n                    .style.color = \"crimson\";\n                break;\n        }\n\n    }\n\n    /**\n     * Show the loading screen\n     * @param {String} title Title of Loading Screen\n     * @param {String} message Message of Loading Screen\n     */\n    function loaderShow (title, message) {\n        document.querySelector(\"#loader-contents > h4\").innerHTML = title;\n        document.querySelector(\"#loader-contents > p\").innerHTML = message;\n        document.getElementById(\"loader-container\").style.display = \"flex\";\n    }\n\n    /**\n     * Hides the loading screen.\n     */\n    function loaderHide() {\n        document.querySelector(\"#loader-contents > h4\").innerHTML = \"\";\n        document.querySelector(\"#loader-contents > p\").innerHTML = \"\";\n        document.getElementById(\"loader-container\").style.display = \"none\";\n    }\n\n    /**\n     * Deletes all sheets titled \"Drop [x]\", letting the user essentially start over.\n     */\n    const wipeSheets = async () => {\n\n        await Excel.run(async (context) => {\n\n            const sheets = context.workbook.worksheets;\n            sheets.load(\"items/name\");\n\n            await context.sync()\n                .catch((e) => {\n                    console.log(\"Unable to load the worksheets...\");\n                    console.log(e);\n                });\n\n            sheets.items.forEach((sheet) => {\n                console.log(\"Removing a sheet...\");\n                if (sheet.name.includes(\"Split\")) {\n                    sheet.delete();\n                }\n            });\n\n            await context.sync()\n                .catch((e) => {\n                    console.log(\"Unable to delete the splits sheets\");\n                    console.log(e);\n                });\n\n        });\n    }\n// #endregion\n\n// #region Change Presets ------------------------------------------------------\n    document.querySelector(\"#presets\").addEventListener(\"change\", async () => {\n        // Show the Load Data area, then prefill data\n        let selSet= document.querySelector(\"#presets\");\n        let text = selSet.options[selSet.selectedIndex].text;\n        let product = presets.filter(product => product.name === text)[0];\n        document.querySelector(\"#alt-rows\").checked = product.alternateRows;\n        document.querySelector(\"#num-up\").value = product.numberUp;\n        document.querySelector(\"#drops\").value = product.numberDrops;\n        document.querySelector(\"#samplerows\").checked= product.trashRows;\n        document.querySelector(\"#curres\").checked= product.curres;\n\n    });\n    document.querySelector(\"#num-up\").addEventListener(\"change\", async () => {\n        const altRowsElem = document.querySelector(\"#alt-rows\");\n        const checked = altRowsElem.checked;\n        if (checked) {\n            altRowsElem.checked = false;\n            // Force the count column to recalculate\n            let event = new Event('change');\n            altRowsElem.dispatchEvent(event);\n            showMessage(\"Count column reset.\", \"Turn back on Alternating Rows to recalculate the count column.\", \"error\")\n        }\n    });\n// #endregion\n\n// #region Process Data --------------------------------------------------------\nlet headArr;\ndocument.getElementById(\"btn-process\").addEventListener(\"click\", async () => {\n    loaderShow(\"Processing...\", `Excel might hang for a moment. Sit tight.<br><small>${randomize(splashText)}</small>`)\n    await Excel.run(async (context) => {\n\n    // #region Number Up -------------------------------------------------------\n        let numUp = Number(document.getElementById(\"num-up\").value);\n        let alternate = document.getElementById(\"alt-rows\").checked;\n        let numDrops = Number(document.getElementById(\"drops\").value);\n\n        if (numUp === \"\") {\n            showMessage(\"Missing Number Up\", \"Please enter a number up.\", \"error\");\n            throw new Error(\"Missing a number up.\");\n        }\n\n        if (numDrops === \"\") {\n            showMessage(\"Missing Number of Drops\", \"Please enter the number of drops.\", \"error\");\n            throw new Error(\"Missing a number of drops\");\n        }\n\n    // #endregion\n\n    // #region Get Sheet Data --------------------------------------------------\n        const sheet = context.workbook.worksheets.getActiveWorksheet();\n        const dataTable = sheet.tables.getItem(\"DataTable\");\n        const sampleRows= document.getElementById(\"samplerows\").checked;\n        const curres = document.querySelector(\"#curres\").checked;\n\n        // Extract the Header and Body values\n        let headerRangeValues = dataTable.getHeaderRowRange().load(\"values\");\n        let bodyRangeValues = dataTable.getDataBodyRange().load(\"values\");\n        await context.sync()\n        headArr = headerRangeValues.values[0];\n\n    //#endregion\n    \n    // #region Remove Existing Processed Sheet ---------------------------------\n        try {\n            let processedSheet = context.workbook.worksheets.getItem(\"Processed\");\n            processedSheet.delete();\n            await context.sync();\n        } catch (e) {\n            console.log(\"👍 No processed sheet found.\");\n        }\n    // #endregion\n        // Find the index of the value \"Code\" regardless of capitalization\n        const index = headerRangeValues.values[0].findIndex(value => value.toLowerCase() === 'code');\n\n        if (index !== -1) {\n            headerRangeValues.values[0][index] = 'CODE';\n            console.log(`Updated array: ${JSON.stringify(headerRangeValues.values)}`);\n        }\n\n    // #region New Table Data --------------------------------------------------\n        // Instantiate arrays to contain the new table data\n        let arr = bodyRangeValues.values.map((row) => row);\n        var newHeaders = [];\n\n        // Add alt column if we're supposed to.\n        if (alternate){\n            headerRangeValues.values[0].unshift(\"alternate\")\n        }\n    // #endregion\n\n    // console.log(headerRangeValues.values[0]);\n    // Regardless of capitalisation, we need to find the \"code\" value in headerRangeValues.values[0] and make it \"Code\"\n    \n\n    // #region New Movers Processing -------------------------------------------\n    if(document.getElementById(\"presets\").value.match(\"Monthly New Movers\")){\n            // New Header Columns for the Expirations\n        let newHeads = [\n            \"Expires_1\", \"Expiration_1\", \"Disclaimer_1\",\n            \"Expires_2\", \"Expiration_2\", \"Disclaimer_2\",\n            \"Expires_3\", \"Expiration_3\", \"Disclaimer_3\"\n        ]\n        let columns = dataTable.columns;\n        columns.load(\"items\");\n\n        await context.sync();\n\n        for (var i = 0; i < columns.items.length; i++) {\n            let colName = columns.items[i].name;\n            if (newHeads.indexOf(colName) >= 0) {\n                // Delete the column\n                columns.items[i].delete();\n            }\n        }\n\n\n\n        // Sync with Excel to load the data\n        await context.sync().catch((e) => {\n            // If there was a problem, tell the user.\n            showMessage(\"Danger!\",\n                \"There was a problem loading the data table.\",\n                \"error\");\n        });\n\n        // Assign table data to a variable\n        const bodyArr = bodyRangeValues.values;\n                                       \n        let addExpirations = async () => {\n            // Find the index of the Coupons column\n            let couponIndex = headArr.indexOf(\"Coupons\");\n            // Add 9 columns to the dataTable at the couponIndex\n            newHeads.forEach(async (head, i)=> {\n                let indx = (couponIndex + 4) + i\n                dataTable.columns.add(indx,  null, head);\n                await context.sync();\n            });\n            await context.sync();\n\n            headArr.splice(couponIndex + 4, 0, ...newHeads);\n\n            // Update body data to newBodyArr\n            return new Promise((resolve, reject) => {\n                // Loop the body rows, inserting 9 columns for the\n                // 3 expiration options\n                let newBodyArr = bodyArr.map((row, i) => {\n\n                    // How many coupons will this row's artwork have?\n                    let numCoupons = row[couponIndex];\n                    if (numCoupons == \"\") numCoupons = 0;\n\n                    // We will add 9 columns no matter what\n                    // If there are 0 coupons, 9 empty values are fine\n                    let empArr = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n\n                    if (numCoupons >= 1) {\n\n                        // Get the expiration values from this row\n                        const expText = row[couponIndex + 1];\n                        const expDate = excelDateToString(row[couponIndex + 2]);\n                        const expDisc = row[couponIndex + 3];\n\n                        // Set a starting index based on num of expiration dates\n                        let empArrI;\n                        if (numCoupons == 1) empArrI = 0;\n                        if (numCoupons == 2) empArrI = 3;\n                        if (numCoupons == 3) empArrI = 6;\n\n                        // Set values for this row.\n                        empArr[empArrI] = expText;\n                        empArr[empArrI + 1] = expDate;\n                        empArr[empArrI + 2] = expDisc;\n\n                    }\n                    \n                    // Insert empty (or not) array into this row at index 4 to\n                    // the right of the couponIndex\n                    row.splice((couponIndex + 4), 0, ...empArr);\n\n                    // Return row with added columns\n                    return row;\n                    // End Promise\n                });\n                resolve(newBodyArr)\n                reject(err)\n\n            });\n\n            // END EXPIRATIONS }}}\n        }\n\n        // Process the Expiration data\n        // let newBodyArr = await addExpirations();\n        let newBodyArr = await addExpirations();\n\n        // I'm not sure this is doing anything, actually.\n        bodyRangeValues.values = newBodyArr;\n        await context.sync().catch(e => {\n            console.log(e)\n        });\n            \n        // End New Mover Conditional\n    }\n    // #endregion\n\n    // #region Current Resident/Or Current Resident ----------------------------\n        // Add the Curres/Ocurres columns if we're supposed to.\n        if (curres) {\n            // arr is the spreadsheet.\n            if (alternate){\n                headerRangeValues.values[0].splice(6, 0, \"curres\");\n                headerRangeValues.values[0].splice(7, 0, \"orcurres\");\n            } else {\n                headerRangeValues.values[0].splice(5, 0, \"curres\");\n                headerRangeValues.values[0].splice(6, 0, \"orcurres\");\n    \n            }\n    \n            arr.forEach((a) => {\n                if (a.includes(\"Or Current Resident\")) {\n                    a.splice(5, 0, \"\", \"Or Current Resident\");\n                } else {\n                    a.splice(5, 0, \"Current Resident\", \"\");\n                }\n                });\n        }\n        // #endregion\n\n    // #region Num-Up Headers --------------------------------------------------\n        for (var i = 1; i < numUp + 1; i++) {\n            // Add a set of headers indicating which 'up' this is\n            newHeaders = newHeaders.concat(headArr\n                // Mapping and adding a new column. Does i equal 1? Then don't add a number. Otherwise, add i.\n                .map((val) => `${val}${i !== 1 ? String(i) : \"\"}`));\n        }\n    // #endregion\n\n    // #region Alternate Columns -----------------------------------------------\n    if (alternate) {\n            // add alt column.\n            for (let i=0; i < arr.length; i++){\n                let modulo= (i % numUp) + 1;\n                arr[i].unshift(modulo)\n            }\n            \n\n            // group by modulo thing.\n            var output = [];\n            for(let i=0; i< numUp; i++){\n                output.push(arr.filter(item => item[0] === i+1));\n            }\n            // Maybe change output arr?\n\n            arr = output[0].map((_,j) =>  {\n                var arrOut = output.map(row => {\n                    return row[j]\n                })\n                var newArr = []\n                for (var n = 0; n < arrOut.length; n++) {\n                    newArr = newArr.concat(arrOut[n]) \n                }\n                return newArr\n            });\n            \n    } \n    // #endregion\n\n    // #region Standard Rows ---------------------------------------------------\n    else {\n\n        if ((arr.length / 2) < numUp) alert(\"NO\")\n        let spIndex = Math.floor(arr.length / numUp);  \n        (arr.length % numUp) > 0 && spIndex++\n\n\n\n        let spl = arr.splice(0, spIndex); // x up, first y fruits\n\n\n        var sampleArr= new Array();\n\n        \n        let arrLen = arr.length\n        \n        for (var x = 0; x < numUp - 1; x++) {\n            \n            let add= arr.splice(0, spIndex); // Takes the first 3 from arr\n\n            spl.forEach((_item, n)=>{\n                if (add[n]){\n                    // Cool, the cells from this exist.\n                    spl[n] = spl[n].concat(add[n]); //spl[n] gets the values of add[n].\n                } else {\n                    // Loop through the items?\n                    spl[n] = spl[n].concat(sampleArr)\n\n\n                }\n            })\n            arrLen--;\n        }\n\n        if (!alternate) arr = [...spl];\n    }\n    // #endregion\n\n        await context.sync();\n\n    // #region Sample Rows at End ----------------------------------------------\n        arr.forEach((_c, row) => {\n            // row is the iteration #.\n            // c is the row itself.\n            arr[row] = arr[row].filter(item => item !== undefined); // Filter out undefined values.\n            if(newHeaders.length > arr[row].length){\n                let newIndex= arr[row].length ;\n\n                for (let cell = newIndex; cell < newHeaders.length; cell++) {\n\n                        let thisHead = newHeaders[cell];\n                        if (thisHead.includes(\"@\") || thisHead.includes(\"Visu\")) {\n                            arr[row][cell] = \"\"\n                        } else {\n                            arr[row][cell]= \"SAMPLE\";\n                        }\n                }\n                }\n            \n        });\n        if (!arr) throw new Error(\"No new data.\");\n    // #endregion\n\n    // #region Data Drops ------------------------------------------------------\n        // We need an array to collect all of the drops now.\n        let splitAt = Math.ceil((arr.length + 1) / numDrops)\n        \n        for (var i = 0; i < numDrops; i++) {\n            let newArr = arr.splice(0, splitAt);\n\n            // Create new sheet for drop\n            let sheets = context.workbook.worksheets;\n            let newSheet = sheets.add(`Split ${i + 1}`);\n\n            // Load range that matches the length of the new split data\n            let newTableRange = newSheet.getRangeByIndexes(0,\n                0, 1, newArr[0].length);\n\n            newTableRange.load(\"address\");\n            await context.sync();\n\n            // Create drop table\n            let dropTable = newSheet.tables.add(newTableRange.address, true);\n            await context.sync();\n\n            // Create headers or table\n            dropTable.getHeaderRowRange().values = [newHeaders]\n            await context.sync();\n            \n            // Add \"SAMPLE\" to head of this table\n            if (sampleRows){\n                let trashRow= new Array();\n                newHeaders.forEach((head) => {\n                   if (head.includes(\"@\") || head.includes(\"Visu\")) {\n                    trashRow.push(\"\")\n                    } else {\n                        trashRow.push(\"SAMPLE\");\n                    } \n                \n            });\n                await context.sync()\n                for (let n = 0; n < 5; n++) newArr.unshift(trashRow)\n            }\n\n            await context.sync();\n\n        \n            // Add data to the table\n            dropTable.rows.add(null, newArr);\n            newSheet.activate();\n\n\n            // Format the count columns.       \n            var zeroNum= bodyRangeValues.values.length;\n            let countIndexes= new Array();\n            // Which columns are count columns?\n            newHeaders.forEach((clmn, indx) => {\n                if (clmn.match(/count/gi)) {\n                    countIndexes.push(indx); // Push the index directly\n                }\n            });  \n            // Add \"let\" here because the code won't run otherwise.\n            for (let k in countIndexes){\n                const countRowRange = newSheet.getRange(`${getLetterByIndex(countIndexes[k])}2`).getEntireColumn();\n                countRowRange.numberFormat = (\"0\").repeat(countDigits(zeroNum))\n                await context.sync();\n            }\n\n            // Format the zipcode columns.       \n            let zipcodeIndexes= new Array();\n            // Which columns are zipcode columns?\n            newHeaders.forEach((clmn, indx) => {\n                if (clmn.match(/zip\\s*code/gi)) {\n                    zipcodeIndexes.push(indx); // Push the index directly\n                }\n            });  \n            // Add \"let\" here because the code won't run otherwise.\n            for (let k in zipcodeIndexes){\n                const zipcodeRowRange = newSheet.getRange(`${getLetterByIndex(zipcodeIndexes[k])}2`).getEntireColumn();\n                zipcodeRowRange.numberFormat = (\"0\").repeat(countDigits(zeroNum))\n                await context.sync();\n            }\n\n            await context.sync(); \n        // End Loop\n    }\n\n    // #endregion\n\n    await context.sync();\n\n    // #region Num-Up ----------------------------------------------------------\n    // Loop the number of times the user chose to be 'up'\n    for (var i = 1; i < numUp + 1; i++) {\n        \n        if (i == 1) {\n            // The first time through, set the array to contain\n            // the new table data to the items with count 1\n            arr = bodyRangeValues.values.filter((row) => row[0] == i); // Error\n            continue;\n        }\n        \n        // Loop the next one, adding to the first\n        const nextArr = bodyRangeValues.values.filter((row) => row[0] == i); \n        \n\n        nextArr.forEach((row, x) => {\n            arr[x] = arr[x].concat(row);\n        })\n\n        if (i == numUp) {\n            // The last iteration, we need to fill remainder of empty\n            // columns with \"BLANK\"\n            const numEmptyData = arr.length - nextArr.length;\n            for (var n = 1; n < numEmptyData + 1; n++) {\n\n                const trashData = bodyRangeValues.values[0].map((data) => {\n\n                    // Ignore anything with an img file output.\n                    let dataSuff;\n                    try {\n                        dataSuff = data.split(\".\")[1].toLowerCase();\n                        } catch (e) {\n                        // Probably no file extension.\n                        dataSuff = null;\n                        }\n                    // Here, check for newheaders' having \"Visu\" in the header\n                    if (imgSuffix.includes(dataSuff)) return \"\"\n                        \n                    // Add Sample to any other columns.\n                    return \"SAMPLE\"\n                })\n                arr[arr.length - n] = arr[arr.length - n].concat(trashData);                    \n            }\n        }\n    }\n\n    // #endregion\n    \n    // Now, hide the window.\n    setTimeout(loaderHide(), 2000);\n});\n    // Hide the \"Process\" and First Screen element.\n    document.querySelectorAll(\"#btn-process, #screen-1\") .forEach((elem) => { elem.style.display = \"none\"; });\n});\n  // #endregion\n\n// #region Click Listeners -----------------------------------------------------\n    const collapsibles = document.getElementsByClassName(\"collapsible-head\");\n\n    // Attach event to each collapsible area...\n    for (var i = 0; i < collapsibles.length; i++) {\n        collapsibles[i].addEventListener(\"click\", function() {\n            // Which area do we want to show/hide?\n            let whatArea = this.getAttribute(\"item\");\n            let toggleArea = document.getElementById(`${whatArea}-container`);\n\n            // Toggle the view\n            let curStyle = toggleArea.style.display;\n            curStyle == \"block\"\n                ? toggleArea.style.display = \"none\"\n                : toggleArea.style.display = \"block\"\n\n        })\n    };\n\n    document.getElementById(\"btn-load\").addEventListener(\"click\", async () => {\n        try {\n            await Excel.run(async (context) => {\n                // Get the active work sheet\n                let sheet = context.workbook.worksheets.getActiveWorksheet();\n                // Create a table out of the currently used range.\n\n                // Get the used range of the active worksheet\n                let range = sheet.getUsedRange();\n\n                // Load properties from the range\n                range.load(\"address\");\n\n                await context.sync();\n\n                // If the address ends in A1, then there's no data on the sheet, alert user\n                if (range.address.slice(-2) == \"A1\") {\n                    showMessage(\"No data!\", \"There appears to be no data on this sheet.\", \"error\");\n                    throw \"No data!\"\n                }\n\n                // Create the table at the address loaded from the range\n                // and name it\n                var dataTable = sheet.tables.add(range.address, true);\n                dataTable.name = \"DataTable\";\n\n                try { await context.sync() } catch (e) {\n                    if (e.message.includes(\"overlap\")) {\n                        document.querySelector(\"#collapsible\").style.display=\"block\";\n                        document.querySelector(\"#editSplash\").style.display=\"block\";\n                        return;\n                    } else {\n                        console.log(\"There was an unhandled problem. Error:\")\n                        console.log(e);\n                    }\n                }\n\n                const indexData = []\n                let bodyRangeValues = dataTable.getDataBodyRange().load(\"values\");\n\n                await context.sync();\n\n                var zeroNum = 0; // This will be a counter to see how many zeros we need for the count column.\n                bodyRangeValues.values.forEach((_row, i) => {\n                    indexData.push([String(i + 1)])\n                    zeroNum++;\n                });\n\n                indexData.unshift([\"count\"])\n\n                dataTable.columns.add(0, indexData);\n                var rowRange = sheet.getRange(\"A2\").getEntireColumn();\n                // Repeats \"0\" as many times as there are digtits in the highest value inside count column\n                rowRange.numberFormat = (\"0\").repeat(countDigits(zeroNum));\n\n                await context.sync();\n\n                // Autofit the data\n                sheet.getUsedRange().format.autofitColumns();\n                sheet.getUsedRange().format.autofitRows();\n                sheet.activate();\n\n                // Show the column editors\n                document.querySelector(\"#collapsible\").style.display=\"block\"\n                document.querySelector(\"#editSplash\").style.display=\"block\"\n\n            })\n        } catch (error) {\n            console.error(error);\n            return;\n        }\n\n        // Show/hide elements as necessary \n        document.querySelectorAll(\"#screen-1, #btn-reset, #btn-process\")\n            .forEach((elem) => {\n                elem.style.display = \"block\";\n            });\n        document.querySelectorAll(\"#btn-load, #btn-export\")\n            .forEach((elem) => {\n                elem.style.display = \"none\";\n            });\n\n    });\n\n    document.getElementById(\"btn-reset\").addEventListener(\"click\", () => {\n        // Hide the appropriate areas\n        document\n            .querySelectorAll(\"#screen-1, #btn-reset, #btn-process, #btn-export\")\n            .forEach((elem) => {\n                elem.style.display = \"none\";\n            })\n\n        // Show/hide elements as necessary \n        document.querySelector(\"#btn-load\").style.display = \"block\";\n        document.getElementById(\"presets\").value = \"none\";\n\n        wipeSheets();\n\n    });\n\n    document.getElementById(\"append\").addEventListener(\"click\", async () => {\n        return Excel.run(async function(context) {\n            let appendText= document.querySelector(\"#appendData\").value;\n\n            const sheet = context.workbook.worksheets.getActiveWorksheet();    \n\n            const table = context.workbook.tables.getItem(\"DataTable\")\n            const tableData = table.getDataBodyRange().load('values');\n\n            const selRange = context.workbook.getSelectedRange().getEntireColumn().load([\"columnIndex\", 'address'])\n\n            await context.sync()\n\n            const index = selRange.columnIndex;\n            const addr = selRange.address;\n\n            let newTableData = []\n            for (var i = 0; i < tableData.values.length; i++) {\n                let row = tableData.values[i];\n                let alteredData = row.map((cell, i) => {\n                    if (i === index) {\n                        return `${cell}${appendText}`\n                    } else {\n                        return cell\n                    }\n                })\n\n                newTableData = newTableData.concat([alteredData])\n\n            }\n            tableData.values = newTableData;\n            \n            await context.sync();\n\n        });\n    });\n\n    document.getElementById(\"prepend\").addEventListener(\"click\", async () => {\n        return Excel.run(async function(context) {\n            let prependText= document.querySelector(\"#prependData\").value;\n\n            const sheet = context.workbook.worksheets.getActiveWorksheet();    \n\n            const table = context.workbook.tables.getItem(\"DataTable\");\n            const tableData = table.getDataBodyRange().load('values');\n\n            const selRange = context.workbook.getSelectedRange().getEntireColumn().load([\"columnIndex\", 'address'])\n\n            await context.sync();\n\n            const index = selRange.columnIndex;\n            const addr = selRange.address;\n\n            let newTableData = []\n            for (var i = 0; i < tableData.values.length; i++) {\n                let row = tableData.values[i];\n                let alteredData = row.map((cell, i) => {\n                    if (i === index) {\n                        return `${prependText}${cell}`\n                    } else {\n                        return cell\n                    }\n                })\n\n                newTableData = newTableData.concat([alteredData])\n\n            }\n            tableData.values = newTableData;\n            \n            await context.sync();\n\n        });\n    });\n\n    document.getElementById(\"lowercase\").addEventListener(\"click\", async () => {\n        return Excel.run(async function(context) {\n            const sheet = context.workbook.worksheets.getActiveWorksheet();    \n\n            const table = context.workbook.tables.getItem(\"DataTable\")\n            const tableData = table.getDataBodyRange().load('values');\n\n            const selRange = context.workbook.getSelectedRange().getEntireColumn().load([\"columnIndex\", 'address'])\n\n            await context.sync()\n\n            const index = selRange.columnIndex;\n            const addr = selRange.address;\n\n            let newTableData = []\n            for (var i = 0; i < tableData.values.length; i++) {\n                let row = tableData.values[i];\n                let alteredData = row.map((cell, i) => {\n                    if (i === index) {\n                        return String(cell).toLowerCase()\n                    } else {\n                        return cell\n                    }\n                })\n\n                newTableData = newTableData.concat([alteredData])\n\n            }\n            tableData.values = newTableData;\n            \n            await context.sync();\n\n        });\n    });\n\n    document.getElementById(\"uppercase\").addEventListener(\"click\", async () => {\n        return Excel.run(async function(context) {\n            const sheet = context.workbook.worksheets.getActiveWorksheet();    \n\n            const table = context.workbook.tables.getItem(\"DataTable\")\n            const tableData = table.getDataBodyRange().load('values');\n\n            const selRange = context.workbook.getSelectedRange().getEntireColumn().load([\"columnIndex\", 'address'])\n\n            await context.sync()\n\n            const index = selRange.columnIndex;\n            const addr = selRange.address;\n\n            let newTableData = []\n            for (var i = 0; i < tableData.values.length; i++) {\n                let row = tableData.values[i];\n                let alteredData = row.map((cell, i) => {\n                    if (i === index) {\n                        return String(cell).toUpperCase()\n                    } else {\n                        return cell\n                    }\n                })\n\n                newTableData = newTableData.concat([alteredData])\n\n            }\n            tableData.values = newTableData;\n            \n            await context.sync();\n\n        });\n    });\n\n    document.getElementById(\"titlecase\").addEventListener(\"click\", async () => {\n        return Excel.run(async function(context) {\n            const sheet = context.workbook.worksheets.getActiveWorksheet();    \n\n            const table = context.workbook.tables.getItem(\"DataTable\")\n            const tableData = table.getDataBodyRange().load('values');\n\n            const selRange = context.workbook.getSelectedRange().getEntireColumn().load([\"columnIndex\", 'address'])\n\n            await context.sync()\n\n            const index = selRange.columnIndex;\n            const addr = selRange.address;\n\n            let newTableData = []\n            for (var i = 0; i < tableData.values.length; i++) {\n                let row = tableData.values[i];\n                let alteredData = row.map((cell, i) => {\n                    if (i === index) {\n                        return toTitleCase(String(cell));\n                    } else {\n                        return cell\n                    }\n                })\n\n                newTableData = newTableData.concat([alteredData])\n\n            }\n            tableData.values = newTableData;\n            \n            await context.sync();\n\n        });\n    });\n\n    document.getElementById(\"artworkCol\").addEventListener(\"click\", async () => {\n        return Excel.run(async function(context) {\n            let dirText= document.querySelector(\"#artworkData\").value;\n\n            const sheet = context.workbook.worksheets.getActiveWorksheet();    \n\n            const table = context.workbook.tables.getItem(\"DataTable\")\n            const tableData = table.getDataBodyRange().load('values');\n\n            const selRange = context.workbook.getSelectedRange().getEntireColumn().load([\"columnIndex\", 'address'])\n\n            await context.sync()\n\n            const index = selRange.columnIndex;\n            const addr = selRange.address;\n\n            let newTableData = []\n            for (var i = 0; i < tableData.values.length; i++) {\n                let row = tableData.values[i];\n                let alteredData = row.map((cell, j) => {\n                // Check if current cell (j) needs modification (based on your index condition)\n                if (j === index) {\n                    // Split the cell at the dot (.)\n                    const parts = cell.split('.');\n                    // Lowercase everything after the first dot\n                    parts[1] = parts[1] ? parts[1].toLowerCase() : ''; // Handle empty strings after dot\n                    // Join the parts back together\n                    return `${dirText}${parts.join('.')}`;\n                } else {\n                    return cell;\n                }\n                });\n                // Update the row with the modified data\n                newTableData = newTableData.concat([alteredData])\n            }\n                    \n            \n            tableData.values = newTableData;\n            \n            await context.sync();\n\n            // Get the first table on this sheet\n            let activeTable = sheet.tables.getItemAt(0);\n\n            // Get the headers from the table\n            let headerRangeValues = activeTable.getHeaderRowRange().load(\"values\");\n            await context.sync();\n            let newHeaderData = []\n\n            for (var i = 0; i < headerRangeValues.values.length; i++) {\n                let row = headerRangeValues.values[i];\n\n                let alteredHeaders = row.map((cell, j) => {\n                // Check if current cell (j) needs modification (based on your index condition)\n                if (j === index) {\n                    return `'@${cell}`;\n                } else {\n                    return cell;\n                }\n                });\n                // Update the row with the modified data\n                newHeaderData = newHeaderData.concat([alteredHeaders])\n            }\n            headerRangeValues.values = newHeaderData;\n            \n            await context.sync();\n        });\n    });\n                                                            \n    document.getElementById(\"msg-dismiss\").addEventListener(\"click\", () => {\n        document.getElementById(\"message\").style.display = \"none\";\n    });\n\n// #endregion ","export default function getPresets() {\n    return [\n        {\n            \"name\": \"Monthly New Movers\",\n            \"alternateRows\": false,\n            \"numberUp\": 4,\n            \"numberDrops\": 8,\n            \"trashRows\": false,\n            \"curres\": true,\n        },\n        {\n            \"name\": \"Plastic New Movers\",\n            \"alternateRows\": true,\n            \"numberUp\": 9,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": true,\n        },\n        {\n            \"name\": \"Mr. Jim's New Movers\",\n            \"alternateRows\": false,\n            \"numberUp\": 4,\n            \"numberDrops\": 1,\n            \"trashRows\": false,\n            \"curres\": true,\n        },\n        {\n            \"name\": \"Envelope Mailer 8.5\\\" x 11\\\"\",\n            \"alternateRows\": false,\n            \"numberUp\": 2,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Envelope Mailer 8.5\\\" x 14\\\"\",\n            \"alternateRows\": false,\n            \"numberUp\": 1,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Plastic Postcard (Small)\",\n            \"alternateRows\": true,\n            \"numberUp\": 9,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Plastic Postcard (Medium)\",\n            \"alternateRows\": true,\n            \"numberUp\": 4,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Plastic Postcard (Large)\",\n            \"alternateRows\": true,\n            \"numberUp\": 3,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Postcards\",\n            \"alternateRows\": false,\n            \"numberUp\": 3,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Jumbo Postcard\",\n            \"alternateRows\": false,\n            \"numberUp\": 2,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Magnets\",\n            \"alternateRows\": false,\n            \"numberUp\": 4,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Menus\",\n            \"alternateRows\": false,\n            \"numberUp\": 1,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": false,\n        },\n        {\n            \"name\": \"Non-Monthly New Movers\",\n            \"alternateRows\": false,\n            \"numberUp\": 4,\n            \"numberDrops\": 1,\n            \"trashRows\": true,\n            \"curres\": true,\n        },\n        {\n            \"name\": \"Radius Mailer Magnets\",\n            \"alternateRows\": false,\n            \"numberUp\": 4,\n            \"numberDrops\": 8,\n            \"trashRows\": true,\n            \"curres\": true,\n        }\n    ]\n}\n","// Just to keep people entertained while Excel works.\nexport default function getSplash() {\n    return [\n        \"Fun fact: Sharks have no bones.\",\n        \"Fun fact: Sharks date back as far as 450 million years ago, compared to dinosaurs who date back 230-240 million years ago.\",\n        \"Fun fact: If you petted a shark, it'd feel like petting sandpaper.\",\n        \"Fun fact: Some sharks-- but not all-- must swim constantly in order to breathe. Talk about a workout.\",\n        \"Fun fact: Sharks have a surprisingly good memory compared to other animals. They can remember as far back as nearly a year.\",\n        \"Fun fact: Sharks are colorblind.\",\n        \"Fun fact: Whale sharks can measure about as long as a school bus.\",\n        \"What do you call a dapper shark? <em>So-fish-dicated.</em>\",\n        \"Did you hear about the all-star shark athlete? He led his team to the <em>chomp-ionship!</em>\",\n        \"Why do sharks live in salt water? Because pepper water would make them sneeze.\",\n        \"You're doing <em>fin-tastic.</em>\",\n        \"The last shark we helped left us a <em>biting</em> review...\",\n        \"Who did all the fish in the sea owe money to? The loan shark, of course.\"\n    ]\n}"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","value","Symbol","iterator","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","args","arguments","apply","err","presets","splashText","currentYear","Date","getFullYear","imgSuffix","toTitleCase","str","words","split","suffixes","titles","word","includes","toUpperCase","toLowerCase","join","getLetterByIndex","index","alphabet","letter","Math","floor","countDigits","number","Office","onReady","preset","getElementById","innerHTML","alternateRows","numberUp","numberDrops","querySelector","headArr","showMessage","title","message","style","display","color","wipeSheets","_ref","_callee2","_context2","Excel","run","_ref2","_callee","context","sheets","_context","workbook","worksheets","load","sync","console","log","items","sheet","delete","_x","addEventListener","_callee3","selSet","text","product","_context3","selectedIndex","filter","checked","trashRows","curres","_callee4","altRowsElem","event","_context4","Event","dispatchEvent","_callee8","_context11","arr","random","_ref6","_callee7","numUp","alternate","numDrops","dataTable","sampleRows","headerRangeValues","bodyRangeValues","newHeaders","newHeads","columns","colName","bodyArr","addExpirations","newBodyArr","_i2","modulo","output","_loop","_i3","spIndex","spl","sampleArr","_loop2","x","splitAt","_loop3","zeroNum","nextArr","numEmptyData","trashData","_context10","Number","getActiveWorksheet","tables","getItem","getHeaderRowRange","getDataBodyRange","t0","findIndex","JSON","stringify","map","row","unshift","match","indexOf","_ref7","_callee6","_headArr","couponIndex","_context6","_ref8","_callee5","head","indx","_context5","add","_x3","_x4","splice","numCoupons","excelDate","utcDays","date","month","day","empArr","empArrI","expText","expDate","getUTCMonth","getUTCDate","getUTCFullYear","toString","expDisc","val","_context7","item","_","j","arrOut","newArr","alert","Array","_context8","_item","_toConsumableArray","_c","cell","thisHead","ceil","newSheet","newTableRange","dropTable","trashRow","_n","countIndexes","k","zipcodeIndexes","_k","_context9","getRangeByIndexes","address","rows","activate","clmn","t1","getRange","getEntireColumn","numberFormat","repeat","t2","t3","data","dataSuff","setTimeout","_x2","querySelectorAll","elem","collapsibles","getElementsByClassName","whatArea","getAttribute","toggleArea","curStyle","_callee10","_context13","_ref10","_callee9","range","indexData","_context12","getUsedRange","_row","format","autofitColumns","autofitRows","_x5","_callee12","_context15","_ref12","_callee11","appendText","table","tableData","selRange","newTableData","alteredData","_context14","getSelectedRange","columnIndex","_x6","_callee14","_context17","_ref14","_callee13","prependText","_context16","_x7","_callee16","_context19","_ref16","_callee15","_context18","_x8","_callee18","_context21","_ref18","_callee17","_context20","_x9","_callee20","_context23","_ref20","_callee19","_context22","_x10","_callee22","_context25","_ref22","_callee21","dirText","activeTable","newHeaderData","_row2","alteredHeaders","_context24","parts","getItemAt","_x11","URL"],"sourceRoot":""}